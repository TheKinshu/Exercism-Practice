; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: npx.cmd nbb nrepl-server :port 53541
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: nbb...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉>  ; Use `alt+enter` to evaluate
#'user/reformat

clj꞉user꞉> 
#'log-levels/reformat

clj꞉log-levels꞉> 
#'log-levels/log-level

clj꞉log-levels꞉> 
#'log-levels/message

clj꞉log-levels꞉> 
"[ERROR]: Stack overflow"

clj꞉log-levels꞉> 
"[ERROR]: Stack overflow"

clj꞉log-levels꞉> 
#'log-levels/message

clj꞉log-levels꞉> 
"[ERROR]: Stack overflow"

clj꞉log-levels꞉> 
#'log-levels/message

clj꞉log-levels꞉> 
["[ERROR]:" "Stack" "overflow"]

clj꞉log-levels꞉> 
#'log-levels/reformat

clj꞉log-levels꞉> 
"error"

clj꞉log-levels꞉> 
"(\"ERROR\" \"Segmentation fault\")(error)"

clj꞉log-levels꞉> 
"(\"Segmentation fault\")(error)"

clj꞉log-levels꞉> 
("ERROR" "Segmentation fault")

clj꞉log-levels꞉> 
; EOF while reading, expected ) to match ( at [22,3]
clj꞉log-levels꞉> 
"(\"Segmentation fault\")"

clj꞉log-levels꞉> 
; Invalid regular expression: /[([A-Z]+)]:\s*([\w ]+)\s*/: Unmatched ')'
clj꞉log-levels꞉> 
#'log-levels/reformat

clj꞉log-levels꞉> 
"error"

clj꞉log-levels꞉> 
"("

clj꞉log-levels꞉> 
"(error)"

clj꞉log-levels꞉> 
; Could not resolve symbol: s
clj꞉log-levels꞉> 
("ERROR" "Segmentation fault")

clj꞉log-levels꞉> 
("Segmentation fault")

clj꞉log-levels꞉> 
"(\"Segmentation fault\")"

clj꞉log-levels꞉> 
" (error)"

clj꞉log-levels꞉> 
#object[Function]

clj꞉log-levels꞉> 
" (error)"

clj꞉log-levels꞉> 
("ERROR" "Segmentation fault")

clj꞉log-levels꞉> 
("Segmentation fault")

clj꞉log-levels꞉> 
("Segmentation fault")

clj꞉log-levels꞉> 
; Could not resolve symbol: deck
clj꞉log-levels꞉> 
; EOF while reading, expected ) to match ( at [15,1]
clj꞉log-levels꞉> 
#'log-levels/swap-top-two-cards

clj꞉log-levels꞉> 
""

clj꞉log-levels꞉> 
"6"

clj꞉elyses-destructured-enchantments꞉> 
"4"

clj꞉elyses-destructured-enchantments꞉> 
"(3 7 8)"

clj꞉elyses-destructured-enchantments꞉> 
#'elyses-destructured-enchantments/swap-top-two-cards

clj꞉elyses-destructured-enchantments꞉> 
(10 3 7 8)

clj꞉elyses-destructured-enchantments꞉> 
#'elyses-destructured-enchantments/swap-top-two-cards

clj꞉elyses-destructured-enchantments꞉> 
(4 10 3 7 8)

clj꞉elyses-destructured-enchantments꞉> 
#'elyses-destructured-enchantments/swap-top-two-cards

clj꞉elyses-destructured-enchantments꞉> 
[4 10 3 7 8]

clj꞉elyses-destructured-enchantments꞉> 
#'elyses-destructured-enchantments/second-card

clj꞉elyses-destructured-enchantments꞉> 
10

clj꞉elyses-destructured-enchantments꞉> 
